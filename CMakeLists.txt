PROJECT(MIBDV)
CMAKE_MINIMUM_REQUIRED(VERSION 3.12.0)
INCLUDE(CheckCXXCompilerFlag)

# variabili di configurazione
SET(MIBDV_VERSION 0.1)
SET(ORGANIZATION "DV")
SET(LOG_PATH ${ORGANIZATION}/${PROJECT_NAME}/logs)
STRING(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOW)
SET(PROGRAM_NAMESPACE ${PROJECT_NAME_LOW})
SET(STYLESHEET_PATH "${PROJECT_SOURCE_DIR}/gui/resources/qss") # solo per sviluppo

# variabili di impostazione ambiente
SET(FLAG_DEBUG_OPTION CACHE BOOL "Modalita' debug")
SET(FLAG_CN_PRESENT CACHE BOOL "CN presente")
SET(FLAG_PLC_PRESENT CACHE BOOL "PLC presente")

IF(FLAG_DEBUG_OPTION)
    ADD_DEFINITIONS(-DFLAG_DEBUG)
ELSE()
    REMOVE_DEFINITIONS(-DFLAG_DEBUG)
ENDIF()
IF(FLAG_CN_PRESENT)
    ADD_DEFINITIONS(-DFLAG_CN_PRESENT)
ELSE()
    REMOVE_DEFINITIONS(-DFLAG_CN_PRESENT)
ENDIF()
IF(FLAG_PLC_PRESENT)
    ADD_DEFINITIONS(-DFLAG_PLC_PRESENT)
ELSE()
    REMOVE_DEFINITIONS(-DFLAG_PLC_PRESENT)
ENDIF()

CHECK_CXX_COMPILER_FLAG("-std=c++14" COMPILER_SUPPORTS_CXX14)
IF(COMPILER_SUPPORTS_CXX14)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
  SET(CMAKE_CXX_STANDARD 14)
ENDIF()

#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-reorder -Wno-long-long -pedantic -Wno-comment -fPIC")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-missing-noreturn -Wno-reorder -Wno-long-long -pedantic -Wno-comment")
SET(CMAKE_VERBOSE_MAKEFILE TRUE)
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

#FIND_PACKAGE(TIFF REQUIRED)
#MESSAGE("TIFF_LIBRARIES = ${TIFF_LIBRARIES}")

FIND_PACKAGE(Qt5Widgets REQUIRED)
MESSAGE("Qt5Widgets_INCLUDE_DIRS: ${Qt5Widgets_INCLUDE_DIRS}")

FIND_PACKAGE(Qt5Gui REQUIRED)
MESSAGE("Qt5Gui_INCLUDE_DIRS: ${Qt5Gui_INCLUDE_DIRS}")

FIND_PACKAGE(Qt5Core REQUIRED)
MESSAGE("Qt5Core_INCLUDE_DIRS: ${Qt5Core_INCLUDE_DIRS}")

FIND_PACKAGE(Qt5LinguistTools REQUIRED)

SET (THIRD_PARTY_PATH "${PROJECT_SOURCE_DIR}/third-party")



######## GALIL #############

FIND_PATH(GALIL_HEADERS_PATH gclib.h "${THIRD_PARTY_PATH}/*/include")
IF (NOT GALIL_HEADERS_PATH)
    MESSAGE(SEND_ERROR "GALIL HEADERS NOT FOUND")
ENDIF()
INCLUDE_DIRECTORIES(${GALIL_HEADERS_PATH})

FIND_LIBRARY(GALIL_GCLIB gclib "${THIRD_PARTY_PATH}/*/lib/x86/")
IF (NOT GALIL_GCLIB)
    MESSAGE(SEND_ERROR "GALIL GCLIB NOT FOUND")
ENDIF()

FIND_LIBRARY(GALIL_GCLIBO gclibo "${THIRD_PARTY_PATH}/*/lib/x86/")
IF (NOT GALIL_GCLIBO)
    MESSAGE(SEND_ERROR "GALIL GCLIBO NOT FOUND")
ENDIF()

FIND_LIBRARY(GALIL_GCLIB_DLL gclib "${THIRD_PARTY_PATH}/*/dll/x86/")
IF (NOT GALIL_GCLIB_DLL)
    MESSAGE(SEND_ERROR "GALIL GCLIB DLL NOT FOUND")
ENDIF()

FIND_LIBRARY(GALIL_GCLIBO_DLL gclibo "${THIRD_PARTY_PATH}/*/dll/x86/")
IF (NOT GALIL_GCLIBO_DLL)
    MESSAGE(SEND_ERROR "GALIL GCLIBO DLL NOT FOUND")
ENDIF()

#ADD_LIBRARY(gclib SHARED IMPORTED)
#ADD_LIBRARY(gclibo SHARED IMPORTED)
SET(GALIL_LIBRARIES ${GALIL_GCLIB} ${GALIL_GCLIBO})

MESSAGE("GALIL_HEADERS_PATH: ${GALIL_HEADERS_PATH}")
MESSAGE("GALIL_GCLIB: ${GALIL_GCLIB}")
MESSAGE("GALIL_GCLIBO: ${GALIL_GCLIBO}")
MESSAGE("GALIL_GCLIB_DLL: ${GALIL_GCLIB_DLL}")
MESSAGE("GALIL_GCLIBO_DLL: ${GALIL_GCLIBO_DLL}")
MESSAGE(GALIL_LIBRARIES: ${GALIL_LIBRARIES})

######## FINE GALIL #############



INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS})
SET(QT_LIBRARIES ${Qt5Core_LIBRARIES} ${Qt5Widgets_LIBRARIES} ${Qt5Gui_LIBRARIES})

SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTOUIC ON)
SET(CMAKE_AUTORCC ON)

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/configure.h.in ${PROJECT_BINARY_DIR}/configure.h)
INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR})

SET(PROJECT_SOURCES "" CACHE INTERNAL "sources of project")
SET(PROJECT_HEADERS "" CACHE INTERNAL "header of project")
SET(PROJECT_UI_FILES "" CACHE INTERNAL "UI files of project")
SET(PROJECT_QSS_FILES "" CACHE INTERNAL "qss stylesheet project")
SET(PROJECT_QRC_FILES "" CACHE INTERNAL "qrc project files")
SET(PROJECT_TS_FILES "" CACHE INTERNAL "ts project files")
SET(PROJECT_QM_FILES "" CACHE INTERNAL "qm project files")
SET(UPDATE_TS CACHE BOOL "") # questo lo setto qui cosi poi lo posso modificare da QtCreator
SET(PROJECT_QSS_PATH "" CACHE INTERNAL "path of qss files") # questo serve per sviluppare il CSS a runtime senza usare il file .qrc (binario)

SET(PROJECT_FOLDERS
    "${PROJECT_SOURCE_DIR}/data"
    "${PROJECT_SOURCE_DIR}/common"
    "${PROJECT_SOURCE_DIR}/devices"
    "${PROJECT_SOURCE_DIR}/gui"
)

FOREACH(item ${PROJECT_FOLDERS})
    MESSAGE("Folder: " ${item})
    INCLUDE_DIRECTORIES(${item})
    ADD_SUBDIRECTORY(${item})
ENDFOREACH(item)

MESSAGE("*** PROJECT_SOURCES: ${PROJECT_SOURCES}")
MESSAGE("*** PROJECT_HEADERS: ${PROJECT_HEADERS}")
MESSAGE("*** PROJECT_UI_FILES: ${PROJECT_UI_FILES}")
MESSAGE("*** PROJECT_QSS_FILES: ${PROJECT_QSS_FILES}")
MESSAGE("*** PROJECT_QRC_FILES: ${PROJECT_QRC_FILES}")
MESSAGE("*** PROJECT_TS_FILES: ${PROJECT_TS_FILES}")
MESSAGE("*** PROJECT_QM_FILES: ${PROJECT_QM_FILES}")

MESSAGE("LINK_LIBRARIES: ${TIFF_LIBRARIES} ${QT_LIBRARIES} ${GALIL_LIBRARIES}")

IF(UPDATE_TS)

    MESSAGE("QT5_CREATE_TRANSLATION")
    FOREACH(TS_ITEM ${PROJECT_TS_FILES})
        QT5_CREATE_TRANSLATION(${PROJECT_SOURCES} ${PROJECT_HEADERS} ${PROJECT_UI_FILES} main.cpp ${TS_ITEM})
    ENDFOREACH(TS_ITEM)

    #SET(PROJECT_QRC_FILES "") # questo serve per evitare problemi di compilazione RCC con CMAKE_AUTORCC ON

ELSE(UPDATE_TS)

    MESSAGE("QT5_ADD_TRANSLATION")
    FOREACH(QM_ITEM ${PROJECT_QM_FILES})
        QT5_ADD_TRANSLATION(${QM_ITEM} ${PROJECT_TS_FILES})
    ENDFOREACH(QM_ITEM)

ENDIF(UPDATE_TS)

ADD_EXECUTABLE(${PROJECT_NAME}-${MIBDV_VERSION}
    main.cpp
    ${PROJECT_SOURCES}
    ${PROJECT_HEADERS}
    ${PROJECT_UI_FILES}
    ${PROJECT_QSS_FILES}
    ${PROJECT_QM_FILES}
    ${PROJECT_QRC_FILES}
    ${PROJECT_TS_FILES}
    )

TARGET_LINK_LIBRARIES(${PROJECT_NAME}-${MIBDV_VERSION}
#    ${TIFF_LIBRARIES}
    ${GALIL_LIBRARIES}
    ${QT_LIBRARIES}
    )


FOREACH(QM_ITEM ${PROJECT_QM_FILES})
    ADD_CUSTOM_COMMAND(
        TARGET ${PROJECT_NAME}-${LIFE_VERSION}
        PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy "${PROJECT_BINARY_DIR}/${QM_ITEM}" "${PROJECT_SOURCE_DIR}/ui/lang/${QM_ITEM}"
        )
ENDFOREACH(QM_ITEM)

# QUI COPIO LE DLL NELLA BUILD PATH
ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME}-${MIBDV_VERSION}
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy ${GALIL_GCLIB_DLL} ${CMAKE_CURRENT_BINARY_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy ${GALIL_GCLIBO_DLL} ${CMAKE_CURRENT_BINARY_DIR}
    )
